services:
  # Zookeeper (Kafka 의존성)
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    networks:
      - kafka_network
    ports:
      - "2181:2181"

  # Kafka 브로커
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    networks:
      - kafka_network
    ports:
      - "9092:9092"
      - "29092:29092"  # ✅ 29092 포트 외부에 노출
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  # Kafka Web UI (Kafdrop)
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    networks:
      - kafka_network
    restart: always
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka:9092"

  # Flink JobManager
  flink-jobmanager:
    image: flink:latest
    container_name: flink-jobmanager
    networks:
      - kafka_network
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

  # Flink TaskManager (실제 데이터 처리 수행)
  flink-taskmanager:
    image: flink:latest
    container_name: flink-taskmanager
    networks:
      - kafka_network
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

  # FastAPI 서비스 (Docker에서 실행 시)
  fastapi:
    build: ./fastapi
    container_name: fastapi
    networks:
      - kafka_network
    ports:
      - "8000:8000"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: "kafka:9092"

networks:
  kafka_network:
    driver: bridge
